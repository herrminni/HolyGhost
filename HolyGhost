#!/usr/bin/perl -w

# FEATURES TODO
# make har and screenshots configurable
# cli switch for casperjs binary
# implement option --hgScreenshotAlways

# Usage:
sub PrintUsage {
print <<USAGE;
Copyright (c) 2013 Michael Kraus

TODO GNU Public License

TODO Requirements Perl LibXML

Usage: $0 Opions:
    --test      file containing testcase (REQUIRED)
    --dir       destination directory of test results (REQUIRED)
    --proxy     specify the proxy server to use, e.g. --proxy=192.168.1.42:8080
    --keep      keep test results (screenshots and HAR files) on success
    --delete    delete test results (screenshots and HAR files) even on error
    --debug     enable debugging output
    --label     Use this string instead of "Total" as performance data label
    --param     Supply multiple optional parameters for use in your test cases.
                This will translate to the casperjs-parameters --hgParam0 to hgParamN.
                Use them in your test cases with casper.cli.get("hgParam0"); ... casper.cli.get("hgParamN");
USAGE
exit 0;
}

use strict;
use Getopt::Long;
use POSIX qw(strftime);
use File::Path qw(make_path remove_tree);
use XML::LibXML;
use File::Spec;
use File::Basename;
my $scriptpath = dirname(File::Spec->rel2abs( __FILE__ ));

# Casper executable to use
my $casper_bin = '/usr/bin/casperjs';

# Extended die
sub die_rc { my $return_code = shift; die @_ }

# Set base variables
my $pid = $$;
my $timestamp = ( strftime "%Y-%m-%d_%H-%M-%S", localtime );

#Prepare exit states
my %ERRORS = (
    'UNKNOWN',  '3',
    'OK',       '0',
    'WARNING',  '1',
    'CRITICAL', '2'
);

# Parse options
my %opt;
my @params;
my @required_opts = qw(test dir);
GetOptions(
    "h|help" => \&PrintUsage,
    "test=s" => \$opt{test},
    "dir=s" => \$opt{dir},
    "proxy:s" => \$opt{proxy},
    "keep" => \$opt{keep},
    "delete" => \$opt{delete},
    "debug" => \$opt{debug},
    "label=s" => \$opt{label},
    "param=s" => \@params,
 );
foreach(@required_opts)
{
    if ( not defined $opt{$_} )
    {
        die_rc(3, "UNKNOWN: Required parameter --$_ not defined! See $0 -h for help.\n");
    }
}

# Create test result directory
my $dest_dir = $opt{dir} . '/' . $timestamp . '_' . $pid;
if ( ! -e $dest_dir )
{
    make_path($dest_dir) or die_rc(3, "UNKNOWN: Could not create directory $dest_dir - $!");
}
my $cookiejar = $dest_dir.'/cookiejar';


my $label;
if ($opt{label})
{
    $label = $opt{label};
} else {
    $label = 'Total';
}

my $casper_cmd = $casper_bin.' --no-colors --ssl-protocol=tlsv1 --ignore-ssl-errors=true --pre='.$scriptpath.'/HolyGhost.js --hgResultpath='.$dest_dir.' --hgHar --hgScreenshot --cookies-file='.$cookiejar;
if ($opt{proxy})
{
    $casper_cmd .= ' --proxy-type=http --proxy='.$opt{proxy};
} else {
    $casper_cmd .= ' --proxy-type=none';
}
if ($opt{debug})
{
    $casper_cmd .= ' --verbose --concise --debug=true';
}
if (@params) {
    my $cnt = 0;
    foreach my $param (@params) {
        $casper_cmd .= ' --hgParam'.$cnt.'="'.$param.'"';
    }
}

$casper_cmd .= ' --xunit=\''.$dest_dir.'/xunit.log\' test '.$opt{test};
#DEBUG
#print $casper_cmd."\n";

my $start = time;
my @output = `$casper_cmd`;
my $rc = ($? >> 8);
my $duration = time - $start;
my @detailed = grep (/^PASS|^FAIL|^#\s{2,}/,@output);
# TODO safe escape detailed output, especially "|"
# TODO handle CasperError

# Parse xunit log
my %steps;
my $parser = XML::LibXML->new();
my $root = $parser->parse_file($dest_dir.'/xunit.log') or die_rc(3, "UNKNOWN: Cannot open " . $dest_dir . "/xunit.log for parsing\n");

# Note:
# A HolyGhost-"Case" consist of exactly one xunit-"Testsuite", only the first Testsuite will be parsed.
# A Holyghost-"Step" consists of one or more following xunit-"Testcases".
my @cases = $root->findnodes('/testsuites/testsuite');
my $case = shift(@cases);

my $case_name = $case->getAttribute("name");
my ( $case_state, $case_shortname, $case_desc) = split(/::/, $case_name);
unless ( $case_state =~ /^OK$|^WARNING$|^ERROR$|^CRITICAL$|^UNKNOWN$/ ) {
    $case_state = "UNKNOWN";
}
my $case_time = $case->getAttribute("time");

my %step;
TESTCASE: foreach my $step ($root->findnodes('/testsuites/testsuite[@name="'.$case_name.'"]/testcase')) {
    my $step_name = $step->getAttribute("name");
    next if $step_name =~ m/Test.ran.into/;
    my ( $step_shortname, $step_desc) = split(/::/, $step_name);
    $step{$step_shortname} += $step->getAttribute("time");
}

# Format perfdata
my $perfdata = "|";
foreach my $pstep ( sort keys %step ) {
    $perfdata .= "\'$pstep\'=".$step{$pstep}."s ";
}
$perfdata .= "\'".$label."\'=". $case_time."s ";

# Format plugin output
my $output = "";
my $addtl_output = "";
if ( $rc == 0 ) {
    $output = "OK: $case_shortname ( $case_desc ) passed.".$perfdata."\n";
} else {
    $output = "$case_state: $case_shortname ( $case_desc ) failed.".$perfdata."\n";
    $rc = $ERRORS{$case_state};

    # read JSESSIONID if any
    open (HARFILE, "<".$dest_dir."/har.har");
    my $har = join("", <HARFILE>);
    my @jsessionids = $har =~ /JSESSIONID=([^;]+)\;/g;
    $addtl_output = join("\n", @jsessionids);

}
print $output;
print $addtl_output;
print @detailed;
print "CasperJS total runtime ".$duration." sec.\n";

# Remove results on test success if "keep" is not desired
unless ($opt{keep})
{
    if ( $rc == 0 )
    {
        remove_tree($dest_dir) or print $!;
    }
}
# Remove results in any case if "delete" is desired
if ($opt{delete})
{
    remove_tree($dest_dir) or print $!;
}

exit $rc;
